function sortBibliography() {
    let inputText = document.getElementById("input").value;
    let type = document.getElementById("typeSelect").value;
    
    let entries = inputText.split("\n\n").map(block => block.split(" / ").map(part => part.trim()));
    
    let parsedEntries = entries.map(parseEntry);
    
    parsedEntries.sort((a, b) => {
        let yearA = a.year || "0000"; // ‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏µ
        let yearB = b.year || "0000";
        return (
            yearB.localeCompare(yearA, 'th', { numeric: true }) ||
            a.author.localeCompare(b.author, 'th') ||
            a.title.localeCompare(b.title, 'th')
        );
    });
    
    let formattedEntries = parsedEntries.map(e => formatEntry(e, type));
    
    document.getElementById("output").innerHTML = formattedEntries.join("<br>\n");
}

function parseEntry(parts) {
    let entry = {
        author: (isNaN(parts[0]) && !parts[0].includes("‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏û‡∏¥‡∏°‡∏û‡πå")) ? parts[0] : "",  // ‚úÖ ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏™‡πà "‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏û‡∏¥‡∏°‡∏û‡πå" ‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÅ‡∏ï‡πà‡∏á
        year: !isNaN(parts[1]) ? parts[1] : "",   // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        title: parts.find((p, i) => i > 1 && !p.includes("‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢")) || "", // ‚úÖ ‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÑ‡∏õ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô title
        journal: parts[3] || "",  // ‚úÖ ‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏£‡∏™‡∏≤‡∏£
        pages: parts[4] || "",
        volume: parts.find(p => /‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà/.test(p)) || "",   // ‚úÖ ‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πàvolume: parts.find(p => /‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà/.test(p)) || "",
        issue: parts[7] || "",    // ‚úÖ ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà
        url: parts.find(p => p.startsWith("http") || p.includes("www.")) || "", // ‚úÖ ‡∏î‡∏∂‡∏á URL ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå
        editor: "",
        bookTitle: "",
        edition: parts.find(p => /^‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà \d+$/.test(p)) || "",
        publisher: parts.find(p => /‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏û‡∏¥‡∏°‡∏û‡πå/.test(p)) || "",
        university: parts.find(p => p.includes("‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢")) || "",
        thesisType: parts[9] || "",
        website: parts.find(p => p.startsWith("http") || p.includes("www.")) || "", // ‚úÖ ‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå
        place: parts.find(p => isProvince(p)) || ""
    };

    console.log("Parsed Entry:", entry); // ‚úÖ Debugging
    
    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏£‡∏ì‡∏≤‡∏ò‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ "(‡∏ö.‡∏Å.)")
    let editorIndex = parts.findIndex(p => p.includes("(‡∏ö.‡∏Å.)"));
    if (editorIndex !== -1 && editorIndex + 1 < parts.length) {
        entry.editor = parts[editorIndex].replace("(‡∏ö.‡∏Å.)", "").trim();
        entry.bookTitle = parts[editorIndex + 1].trim();
    }

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ "(‡∏ô./xx-xxx)"
    let pagesIndex = parts.findIndex(p => /\(‡∏ô\.\d+[-‚Äì]\d+\)/.test(p));
    if (pagesIndex !== -1) {
        entry.pages = parts[pagesIndex];
    }

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏û‡∏¥‡∏°‡∏û‡πå (‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤)
    let publisherIndex = parts.findIndex(p => /‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏û‡∏¥‡∏°‡∏û‡πå/.test(p) && p !== entry.pages);
    if (publisherIndex !== -1) {
        entry.publisher = parts[publisherIndex];
        
    }

    return entry;
}

function formatEntry(e, type) {
    let formatted = "";
    switch (type) {
        case "book":
            return `${e.author ? e.author + ". " : ""}(${e.year}). <i>${e.title}</i>${e.edition ? " (" + e.edition + ")" : ""}. ${e.publisher}.`;
        case "articleInBook":
            return `${e.author}. (${e.year}). ${e.title}. ‡πÉ‡∏ô ${e.editor} (‡∏ö.‡∏Å.), <i>${e.bookTitle}</i> ${e.pages}. ${e.publisher}.`;
        case "thesis":
            return `${e.author}. (${e.year}). ${e.title} [${e.university}]. ${e.website || e.url}`;
        case "website":
            return `${e.author}. (${e.year}). ${e.title}. ${e.website || e.url}`;
        case "journalOnline":
            return `${e.author}. (${e.year}). ${e.title}. <i>${e.journal || "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏£‡∏™‡∏≤‡∏£"}</i>, ${e.volume || "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà"}, ${e.pages}. ‡∏™‡∏∑‡∏ö‡∏Ñ‡πâ‡∏ô‡∏à‡∏≤‡∏Å ${e.url || "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ URL"}`;
        default:
            return `${e.author}. (${e.year}). ${e.title}.`;
    }
    console.log("üìå Formatted Entry:", formatted); // ‚úÖ Debugging ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
    return formatted;
}

function isProvince(text) {
    let provinces = ["‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø", "‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà", "‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ", "‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô", "‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï", "‡∏£‡∏∞‡∏¢‡∏≠‡∏á", "‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ", "‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤"];
    return provinces.includes(text.replace(/\s+/g, ""));
}

function normalizeText(text) {
    return text.replace(/(\d{4})\s*$/gm, "$1 /")
               .replace(/‡∏™\s*‡∏≤‡∏ô‡∏±‡∏Å‡∏û‡∏¥‡∏°‡∏û‡πå/g, "‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏û‡∏¥‡∏°‡∏û‡πå")
               .replace(/‡∏Ç‡∏±\s*‡πâ‡∏ô/g, "‡∏Ç‡∏±‡πâ‡∏ô")
               .replace(/‡∏Ñ‡∏£‡∏±\s*‡πâ‡∏á/g, "‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
               .replace(/‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•\s*‡∏¢‡∏±/g, "‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢")
               .replace(/‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£\s*‡∏π‡πâ/g, "‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ")
               .trim();
}

function processPDF(event) {
    let file = event.target.files[0];
    if (file) {
        let reader = new FileReader();
        reader.readAsArrayBuffer(file);
        reader.onload = function () {
            let typedarray = new Uint8Array(reader.result);
            pdfjsLib.getDocument(typedarray).promise.then(async function (pdf) {
                let pagesText = [];
                for (let i = 1; i <= pdf.numPages; i++) {
                    let page = await pdf.getPage(i);
                    let textContent = await page.getTextContent();
                    let items = textContent.items.map(item => item.str.trim());
                    let pageText = normalizeText(items.join("\n"));
                    pagesText.push(pageText);
                }
                document.getElementById("input").value = pagesText.join("\n\n");
            }).catch(error => {
                console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô PDF:", error);
            });
        };
    }
}

document.getElementById("pdfInput").addEventListener("change", processPDF);

function copyToClipboard() {
    let outputText = document.getElementById("output").innerText;
    navigator.clipboard.writeText(outputText).then(() => {
        alert("‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!");
    });
}
